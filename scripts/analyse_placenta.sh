#!/bin/bash
#================================================================================
# Example script for processing a placental volume
#
# Authors: Tom Doel
#          M.A. Zuluaga
# Copyright UCL 2017
#================================================================================


# Set location of vessel-tools git repository
vessel_tools_source_dir="${HOME}/Code/vessel-tools"

# Set location of vessel-tools build directory - this is the one you set in CMake before building vessel-tools
vessel_tools_build_dir="${HOME}/Code/vessel-tools-build"

# Set locaiton of ImageJ
fiji_bin="/Applications/Fiji.app/Contents/MacOS/ImageJ-macosx"

# The original microCT volume
input_file="~/***path-to_vge_file/input_file.vge"

short_patient_id="SUBJECT1"

# The root folder where all the output files will be saved
output_dir="~/placenta_output/$short_patient_id"


# Executables
cardiovasc_utils_bin="${vessel_tools_build_dir}/misc/cardiovasc_utils"
change_type_bin="${vessel_tools_build_dir}/misc/cardiovasc_changetype"
stats_bin="${vessel_tools_build_dir}/analysis/compute_statistics"
seg_with_histo_bin="${vessel_tools_build_dir}/process/seg_withhisto"

# ImageJ scripts
skeleton_script="${vessel_tools_source_dir}/ImageJ/SkeletonScript.bsh"
thickness_script="${vessel_tools_source_dir}/ImageJ/ThicknessScript.bsh"







# Set up output folders
split_data_dir="${output_dir}/split"
mkdir -p "$split_data_dir"

placental_mask_folder="${output_dir}/mask"
mkdir -p "$placental_mask_folder"

vessel_segmentation_folder="${output_dir}/segmented"
mkdir -p "$vessel_segmentation_folder"

centerline_folder="${output_dir}/centerline"
mkdir -p "$centerline_folder"

centerline_stats_folder="${output_dir}/centerline_stats"
mkdir -p "$centerline_stats_folder"

thickness_folder="${output_dir}/thickness"
mkdir -p "$thickness_folder"

stats_folder="${output_dir}/stats"
mkdir -p "$stats_folder"

pruned_folder="${output_dir}/pruned"
mkdir -p "$pruned_folder"

recombined_folder="${output_dir}/recombined"
mkdir -p "$recombined_folder"








echo ---SPLITTING FILES---

# Split the original volume into smaller subvolumes. Only need to do this if the original volume is too big to process
# Also rescale the input to 8-bit value between the specified values. This will further reduce file size but also reduces quality.
# Note the rescale values are manually chosen for our data; ideally this could be done using an automated method such as
# histogram fitting, but it would neded to robust to artefacts such as implants which will skew the histograms in some datasets,

# Split the input volume into smaller subvolumes, with specified size, format and maximum overlap
imagesplit --input "${input_file}" --out "${split_data_dir}/${short_patient_id}_" --format mhd --overlap 50 --max 300

# Alternative split command for rescaling the data; however the histo comand might fail with a different datatype
# imagesplit --input "$input_file" --out "$split_data_dir/${short_patient_id}_" --format mhd --rescale -20 60 --type MET_UCHAR --overlap 50 --max 600

# The descriptor file is generated by imagesplit and used to recombine subvolumes into volumes later
descriptor_filename="${split_data_dir}/${short_patient_id}__info.imagesplit"









echo ---PROCESSING SPLIT FILES---

# We loop through each subvolume and run processing separately

shopt -s nullglob # Ensures the for loop does not process if there are no files
for input_filename in "${split_data_dir}"/*.mhd
do
    echo Processing "${input_filename}"
    base_filename=$(basename "${input_filename}" .mhd)

    # Create mask
    placental_mask_filename="${placental_mask_folder}/mask_${base_filename}.mhd"
    echo Writing placental mask file to:"${placental_mask_filename}"
    "${cardiovasc_utils_bin}" -i "${input_filename}" --otsu --inv --lconcom -o "${placental_mask_filename}"

    # Vessel segmentation with histogram using the mask
    vessel_segmentation_filename="${vessel_segmentation_folder}/segmented_${base_filename}.mhd"
    echo Writing vessel segmentation file to:"${vessel_segmentation_filename}"
    "${seg_with_histo_bin}" -i "${input_filename}" -o "${vessel_segmentation_filename}" -m "${placental_mask_filename}"

    # Extract centerline and get statistics (see http://imagej.net/AnalyzeSkeleton#Table_of_results)
    # Note: This ImageJ plugin currently does not work in headless mode
    # Note: This ImageJ plugin currently does not accept spaces in the output filename parameteres
    centerline_filename="${centerline_folder}/centerline_${base_filename}.mhd"
    general_stats_filename="${centerline_stats_folder}/centerline_stats_one_${base_filename}.xls"
    detailed_stats_filename="${centerline_stats_folder}/centerline_stats_two_${base_filename}.xls"
    echo Writing centerline file to:"${centerline_filename}" and stats to "${general_stats_filename}" and "${detailed_stats_filename}"
    # Run the ImageJ script.
    "${fiji_bin}" --ij2 --run "${skeleton_script}" "input_file=\"${segmented_filename}\", output_file=\"${centerline_filename}\", output_statsOne=\"${general_stats_filename}\", output_statsTwo=\"${detailed_stats_filename}\""

    Thickness estimation
    Note: This ImageJ plugin currently does not work in headless mode
    Note: This ImageJ plugin currently does not accept spaces in the output filename parameteres
    threshold=254 #This parameter could be also be given as an input
    thickness_filename="${thickness_folder}/${base_filename}_thickvolume.mhd"
    echo Writing thickness file to:"${thickness_filename}"
    "${fiji_bin}" --ij2 --run "${thickness_script}" "input_file=\"${segmented_filename}\", threshold=${threshold}, output_file=\"${thickness_filename}\""

    # Run statistics
    #   Computes some basic statistics over the thickness image and displays them.
    #   This should be useful to understand up to which level of thickness in the vessels you want to keep.
    statsmask_filename="${stats_folder}/${base_filename}_statsmask.mhd"
    echo Writing statistics mask file to:"${statsmask_filename}"
    "${cardiovasc_utils_bin}" -i "${segmented_filename}" --ith 254 255 -o "${statsmask_filename}"
    "${change_type_bin}" -i "${statsmask_filename}" -o "${statsmask_filename}"
    "${stats_bin}" -l "${statsmask_filename}" -i "${thickness_filename}"

    # Prune out smaller structures
    thickmask_filename="${pruned_folder}/${base_filename}_thickmask.mhd"
    echo Writing images with smaller structures pruned out to:"${thickmask_filename}"
    "${cardiovasc_utils_bin}" -i "${segmented_filename}" --mul "${thicknessbin_filename}" -o "${thickmask_filename}"
    "${change_type_bin}" -i "${thickmask_filename}" -o "${thickmask_filename}"
done


echo ---RECOMBINING SPLIT FILES---


# Merge placental mask components into single output file
imagesplit --input "${placental_mask_folder}/mask_${short_patient_id}_.mhd" --out "${recombined_folder}/${short_patient_id}_placenta" --format mhd --descriptor "${descriptor_filename}"

# Merge vessel segmentation components into single output file
imagesplit --input "${vessel_segmentation_folder}/segmented_${short_patient_id}_.mhd" --out "${recombined_folder}/${short_patient_id}_vessels" --format mhd --descriptor "${descriptor_filename}"

# Merge vessel segmentation components into single output file
imagesplit --input "${centerline_folder}/centerline_${short_patient_id}_.mhd" --out "${recombined_folder}/${short_patient_id}_centerline" --format mhd --descriptor "${descriptor_filename}"
